package org.weirdcanada.common.query

import scalaz.Free

import org.specs2._

class FreeQueryStringTest extends Specification { def is = s2"""

  This is a specificationt to ensure the string query generated by FreeQuery is correct.

  The simple FreeQuery query should
    equal to it's string version   $e1
    equal to it's string version when using strict column defintions   $e2

  The more complex FreeQuery string should
    equal to another string   $e3

  The third FreeQuery string should
    work with where clauses!  $e4

  The simple update query should
    equal to it's string version $e5
  """

  import FreeQueryStringTest._
  import FreeQuery._ 

  def e1 = cleanse(freeQueryString1) mustEqual cleanse(sqlInterpreter(freeQuery1, Nil))
  def e2 = cleanse(freeQueryString1) mustEqual cleanse(sqlInterpreter(freeQuery1Alt, Nil))
  def e3 = cleanse(freeQueryString2) mustEqual cleanse(sqlInterpreter(freeQuery2, Nil))
  def e4 = cleanse(freeQueryString3) mustEqual cleanse(sqlInterpreter(freeQuery3, Nil))
  def e5 = cleanse(updateQueryString5) mustEqual cleanse(sqlInterpreter(updateQuery5, Nil))

}

object FreeQueryStringTest { 

  import FreeQuery._
  import SQLTable._

  val freeQueryString1: String = """select t1.column1 from table1 as t1"""
  
  val freeQuery1: Free[FreeQuery, Unit] = 
    for {
      t1 <- table("table1" as "t1")
      column1 <- t1.column("column1")
      _ <- select(column1)
      _ <- from(t1)
    } yield ()

  val freeQuery1Alt: Free[FreeQuery, Unit] = 
    for {
      _ <- select("t1.column1")
      _ <- from("table1 as t1")
    } yield ()

  val freeQueryString2: String = """
    select t1.column1, t2.column2
    from 
      table1 as t1
      inner join table2 as t2 on (t1.id = t2.id)
  """

  val freeQuery2: Free[FreeQuery, Unit] = 
    for { 
      t1 <- table("table1" as "t1")
      t2 <- table("table2" as "t2")
      column1 <- t1.column("column1")
      column2 <- t2.column("column2")
      t1Id <- t1.column("id")
      t2Id <- t2.column("id")
      _ <- select(column1, column2)
      _ <- from { t1 innerJoin t2 |*| t1Id === t2Id }
    } yield ()

  val freeQueryString3: String = """
    select t1.column1, t2.column2
    from 
      table1 as t1
      inner join table2 as t2 on (t1.id = t2.id)
    where 
      ( t1.column1 = ? )
      and
      ( t2.column2 <> ? )
  """

  val freeQuery3: Free[FreeQuery, Unit] = 
    for { 
      t1 <- table("table1" as "t1")
      t2 <- table("table2" as "t2")
      column1 <- t1.column("column1")
      column2 <- t2.column("column2")
      t1Id <- t1.column("id")
      t2Id <- t2.column("id")
      _ <- select(column1, column2)
      _ <- from { t1 innerJoin t2 |*| t1Id === t2Id }
      _ <- where { (column1 === 5) and (column2 =!= "seven") }
    } yield ()

  val updateQueryString5: String = """
    update table1 as t1
    set t1.column1 = ?
    where t1.column1 = ?
  """

  val updateQuery5: Free[FreeQuery, Unit] = 
    for { 
      t1 <- table("table1" as "t1")
      column1 <- t1.column("column1")
      _ <- update(t1)
      _ <- set(column1 === 5)
      _ <- where { (column1 === 6) }
    } yield ()

  def cleanse(string: String): String = 
    string
      .toLowerCase
      .replace(" ", "")
      .replace("\n", "")
      .replace("\r", "")
}
